//using AutoMapper;
//using Microsoft.AspNetCore.Mvc;
//using Moq;
//using System.Threading.Tasks;
//using WebApi.Entity;
//using WebApi.Interface;
//using WebApi.Models;
//using WebApi.Service;
//using WebApi.V1.Controllers;
//using Xunit;

//namespace WebApiUnitTesting.V1.Controller.StudentController
//{
//    public class StudentControllerTests
//    {
//        private readonly Mock<IStudentRepository> _mockRepo;
//        private readonly Mock<IMapper> _mockMapper;
//        private readonly Student _controller;

//        public StudentControllerTests()
//        {
//            _mockRepo = new Mock<IStudentRepository>();
//            _mockMapper = new Mock<IMapper>();
//            _controller = new StudentController(_mockMapper.Object, _mockRepo.Object);
//        }

//        [Fact]
//        public async Task GetStudentsAsync_ReturnsBadRequest_WhenPageNumberOrPageSizeIsInvalid()
//        {
//            // Arrange
//            int invalidPageNumber = 0;
//            int invalidPageSize = 0;

//            // Act
//            var result = await _controller.GetStudentsAsync(invalidPageNumber, invalidPageSize);

//            // Assert
//            var badRequestResult = Assert.IsType<BadRequestObjectResult>(result.Result);
//            Assert.Equal("Page number must be greater than 0.", badRequestResult.Value);
//        }

//        [Fact]
//        public async Task GetStudentsAsync_ReturnsPagedStudents_WhenValidInput()
//        {
//            // Arrange
//            int pageNumber = 1;
//            int pageSize = 2;
//            var students = new List<Student>
//            {
//                new Student { Id = 1, Name = "Alice" },
//                new Student { Id = 2, Name = "Bob" }
//            };

//            var pagedStudents = new PagedResult<Student>
//            {
//                PageNumber = pageNumber,
//                PageSize = pageSize,
//                TotalCount = 2,
//                Data = students
//            };

//            var studentDtos = new List<StudentDto>
//            {
//                new StudentDto { Id = 1, Name = "Alice" },
//                new StudentDto { Id = 2, Name = "Bob" }
//            };

//            _mockRepo.Setup(r => r.GetStudentsAsync(pageNumber, pageSize))
//                     .ReturnsAsync(pagedStudents);

//            _mockMapper.Setup(m => m.Map<List<StudentDto>>(students))
//                       .Returns(studentDtos);

//            // Act
//            var result = await _controller.GetStudentsAsync(pageNumber, pageSize);

//            // Assert
//            var okResult = Assert.IsType<OkObjectResult>(result.Result);
//            var returnValue = Assert.IsType<PagedResult<StudentDto>>(okResult.Value);

//            Assert.Equal(2, returnValue.TotalCount);
//            Assert.Equal(2, returnValue.Data.Count);
//            Assert.Equal("Alice", returnValue.Data[0].Name);
//        }

//        [Fact]
//        public async Task GetStudentByIdAsync_ReturnsOkResult_WhenStudentExists()
//        {
//            // Arrange
//            var studentId = 1;
//            var studentEntity = new Student { Id = studentId, Name = "John Doe" };
//            var studentDto = new StudentDto { Id = studentId, Name = "John Doe" };

//            _mockRepo.Setup(repo => repo.GetStudentByIdAsync(studentId))
//                     .ReturnsAsync(studentEntity);

//            _mockMapper.Setup(mapper => mapper.Map<StudentDto>(studentEntity))
//                       .Returns(studentDto);

//            // Act
//            var result = await _controller.GetStudentByIdAsync(studentId);

//            // Assert
//            var okResult = Assert.IsType<OkObjectResult>(result.Result);
//            var returnValue = Assert.IsType<StudentDto>(okResult.Value);
//            Assert.Equal(studentId, returnValue.Id);
//        }

//        [Fact]
//        public async Task GetStudentByIdAsync_ReturnsNotFound_WhenStudentDoesNotExist()
//        {
//            // Arrange
//            var studentId = 99;
//            _mockRepo.Setup(repo => repo.GetStudentByIdAsync(studentId))
//                     .ReturnsAsync(null as Student);

//            // Act
//            var result = await _controller.GetStudentByIdAsync(studentId);

//            // Assert
//            var notFoundResult = Assert.IsType<NotFoundObjectResult>(result.Result);
//            Assert.Equal($"Student with ID {studentId} not found.", notFoundResult.Value);
//        }

//        [Fact]
//        public async Task DeleteStudentAsync_ReturnsNotFound_WhenStudentDoesNotExist()
//        {
//            // Arrange
//            int studentId = 99;

//            _mockRepo.Setup(r => r.GetStudentByIdAsync(studentId))
//                     .ReturnsAsync(null as Student);

//            // Act
//            var result = await _controller.DeleteStudentAsync(studentId);

//            // Assert
//            var notFoundResult = Assert.IsType<NotFoundObjectResult>(result);
//            Assert.Equal($"Student with ID {studentId} not found.", notFoundResult.Value);
//        }
//        [Fact]
//        public async Task DeleteStudentAsync_ReturnsNoContent_WhenStudentExists()
//        {
//            // Arrange
//            int studentId = 1;
//            var student = new Student { Id = studentId, Name = "Test Student" };

//            _mockRepo.Setup(r => r.GetStudentByIdAsync(studentId))
//                     .ReturnsAsync(student);

//            _mockRepo.Setup(r => r.DeleteStudentByIdAsync(studentId))
//                     .Returns(Task.FromResult((Student?)student));

//            // Act
//            var result = await _controller.DeleteStudentAsync(studentId);

//            // Assert
//            Assert.IsType<NoContentResult>(result);
//            _mockRepo.Verify(r => r.DeleteStudentByIdAsync(studentId), Times.Once);
//        }
//    }
//}